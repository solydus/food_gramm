name: Foodgram workflow

# Controls when the workflow will run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      # Запуск actions checkout — готового скрипта 
      # для клонирования репозитория
      - name: Checkout repo
        uses: actions/checkout@v2

      # Запуск actions setup-python — готового скрипта 
      # для развёртывания окружения Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # Выбор версии Python
          python-version: 3.7

      - name: Install dependencies
        run: |
          # обновление pip
          python -m pip install --upgrade pip
          # установка flake8 и его плагинов
          pip install flake8 flake8-return
          # установка зависимостей
          pip install -r backend/requirements.txt
        
      - name: Test with flake8
        run: |
          # запуск проверки проекта по flake8
          python -m flake8 backend
        
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
#          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker compose stop
            sudo docker compose rm backend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env 
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env 
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env 
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose up -d --build
            sudo docker compose exec backend python manage.py migrate
            sudo docker compose exec backend python manage.py import_csv
            sudo docker compose exec backend python manage.py collectstatic --no-input

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
